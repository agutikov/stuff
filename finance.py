#!/usr/bin/python





'''

	юзвери
	у каждого юзверя есть интервалы времени когда он "учавствует" и когда нет - т.е. когда он должен сдавать и когда нет
		это обобщение варианта когда записывается только дата вступления и выбытия из рядов
	на каждом интервале юзверь может иметь разный размер "обещанного взноса" - т.е. суммы которую он подписался платить ежемесячно
	никто ему не мешает взносить больше - тогда то что больше - можно раскидать на определённые месяцы или оставить за тот в который произведён взнос

	таймлайн - квантование по дням
	юзвери сдают деньги в какой-то день в какой-то валюте
	они зачисляются на "личный счёт" но фактически являются уже общаком - и включаются в него при подсчётах

	таким образом общак считается во всех валютах сразу

	далее - за что-то надо платить
	и тут появляются затратные статьи - такие как аренда, ремонт, и т.д.
	среди них есть обязательные и необязательные
	т.е. кто-то может подписаться или нет на необязательные
	но! - оплата, в отличии от взносов, производится всегда в одной определённой валюте

	далее в какой-то день может произойти обмен валют - тогда тот кто менял общаковые бабки вносит в историю запись о том где когда и сколько менял
	если не вся определённая валюта обменяна - то считается что с каждого лчиного счёта снята пропорциональная сумма
	и вот тогда надо чтобы можно было проследить с кого сколько взяли в какой валюте и на что поменяли

	а потом поменянные деньги и непоменянные - оправляются на оплату чего-либо
	и фактически фиксируются в виде оплаты

	т.е. всегда можно проследить - сколько кто внёс, сколько из этого на что и когда поменяли и сколько на что и когда потратили

	----

	!!! важный технический момент

	данные обрабатываются в sqlite с клиентом на питоне
	хранятся в виде дампа в sql с контролем версий через git
	интерфейс как у fdisk - консольный интерактивный (не коммандный для начала)

	потом можно будет сделать сервак и клиент с коммандным интерфейсом
	и все остальные свистелки типа curses, gui, webgui и т.д.






	----

	вариант со счетами и обезличенной валютой не прокатит - надо рисовать куски денег с собственной историей:
	от кого когда поступили, когда дробились или объединялись, когда и на что менялись, когда и на что потратились
	дробить и соединять можно куски денег только одной валюты
	менять можно только разные валюты одну на другую - всегда определённые куски

	первое что приходит в голову - тут обязательно понадобятся рациональные числа

	юзверь:
		интервалы
		взносы
	интервал: начало, конец, обещанная сумма
	сумма: валюта, рациональная сумма
	кусок денег: валюта, рациональная сумма, id
	операции:
		взнос - дата, юзер, кусок денег,
		деление - начальный кусок денег - получившиеся куски,
		слияние - начальные куски - получившийся новый кусок денег,
		обмен - начальные кусок в одной валюте - итоговый в другой, плюс дата, место, курс и т.д.,
		расход - кусок денег в одной валюте, дата, описание
		составная операция - имеющая логический смысл оперция состоящая из нескольких атомарных например деление и слияний



'''


import sys
import io
from pprint import pprint
import argparse
from pygit2 import *
import sqlalchemy
from multi_key_dict import multi_key_dict


'''
	параметры коммандной строки
	конфиг

	дальше находим репозитарий и вытаскиваем оттуда files.list
	создаем базу sqlite в памяти и грузим туда файлы из списка по очереди
	сначала файлик создающий таблицы, потом данные для каждой таблицы

	база готова - выводим инфу и пошли в бесконечный цикл интерфейса

	каждая команда реализована в отдельной функции
	парсинг параметров общий
	есть список функций с описанием, и метаданными о парамтерах
	и мап имён комманд на описания функций
	функции могут быть активными и неактивными в зависимости от того загружена база или нет
	при первом запуске когда базы ещё нет выводится пояснение как её создать - специальной командой

	после выполнения каждой изменяющей функции делается дамп базы вручную:
	данные по каждой таблице в отдельном файле, создание таблиц отдельно, и список файлов
	далее это кладется в гит и коммитится

	изменяющие функции:
		взнос
		обмен
		расход

	неизменяющие:
		кто сколько когда сдал в какой валюте
		кто сколько когда сдал в переводе на конкретную валюту (для отчётов например)
		и т.д.
		
	TODO: как реализовать необязательные расходные статьи

'''




# engine = create_engine('sqlite:///:memory:', echo=True)







while True:
	cmd = input('--> ')
	print("\n \"" + cmd + "\" \n")












