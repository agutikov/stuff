


Инфа хранится в виде сумм на данный конкретный момент.
Изменения дополнительно фиксируются в виде лога, но их
также можно вычеслить и через разность двух соседних по времени сумм.


currency

subject


статьи расходов (например: аренда, коммуналка)
contracts
  description

счета (например: аренда за январь)
bills
  contract_id
  due_inc
  amount
  currency_id
  comments
  from
  to


bill_payments
  bill_id
  transaction_id
  comments

donations
  subject_id
  transaction_id
  comments



transactions
  description
  timestamp

totals
  creation_transaction_id
  destruction_transaction_id
  amount
  currency_id

events
  transaction_id
  amount
  currency_id


================================================================================

основные функции редактирования:
1) добавить транзакцию в которую можно включить любые изменения в любой валюте, т.е.
например обмен 100 долл на 1000 руб будет в одну транзакцию два ивента: один -100долл, второй +1000руб
всё редактирование выполняется добавлением ещё одной транзакции
2) добавить donation от сабджекта
3) добавить оплату счёта
4) добавить счёт
5) добавить контракт



сводные данные за период:
1) взносы: группировка по субъектам или по месяцам
2) для конкретного субъекта по месяцам
4) оплаты: все по датам, группировка по назначению
5) оплаты только по конкретному назначению
7) обмены по порядку
8) вся история вместе

сводные данные:
	- остаток
	- задолженность по каждому виду оплаты и всего
	- задолженность на следующий месяц





интеграция:

1) связь между модулями - через пары type:integer,id:string
2) модуль запрашивает у интегратора объект с типом и id для отображения в таблицах вместо type+id
	или модуль запрашивает у интегратора список объектов одного типа с id из списка
3) тип - это номер таблицы-интерфейса
	например модуль finance запрашивает у интегратора объект с таким-то id из модуля personal_info
4) нужен глобальный учёт таблиц-интерфейсов
5) external_id жёстко привязан к объекту в базе модуля, а external_type - к таблице с этими объектами
6) интегратор по глобальной таблице выбирает из какого модуля ему запрашивать объект и запрашивает
7) если модуля нет, или модуль вернул ошибку, или объект не найден - интегратор использует заглушки
8) когда добавляется модуль - всё что ему нужно сделать - зарегистрировать свои интерфейсы у интегратора
9) в полной мере только родной для объектов модуль может отображать содержимое объекта потому что только он знает что это за объект
	но другим модулям, ссылающимся на этот объект тоже надо его отображать:
	из полученного объекта можно получить его представление для "чужих" модулей:
		- короткое текстовое представление
		- расширенное текстовое представление
		- ссылка на детальное описание объекта

пока обойдёмся этим, но если этого не хватит - придётся кроме типа и идентификатора добавлять тип представления и тогда модуль уже будет возвращать сложный объект для преобразования в html или сразу html

? надо ли модулю декларировать свои зависимости (external_type которые он использует) ?



модули:
1) personal_info + contacts
3) finance
4) credentials (на случай удалённого входа)
5) social_info (интересы и т.д.)
6) projects
7) access_rights



