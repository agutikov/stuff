

# after git clone

$ python manage.py migrate
$ python manage.py createsuperuser
$ python manage.py loaddata finance/data/currency.yaml
$ python manage.py loaddata finance/data/initial_totals.json
$ python manage.py loaddata finance/data/test_dataset.json
$ python manage.py runserver 0.0.0.0:8000





Интеграция.

модель == тип объектов
каждое приложение имеет список публичных моделей, на которые можно ссылаться из других приложений
то-же самое что список моделей, которые участвуют в работе других приложений в различных ролях
например юзер в финансах - плательщик взносов, в проектах - участник проекта, и т.д.
т.е. кроме списка экспортируемых моделей у приложения есть ещё список импортируемых ролей

приложение экспортёр моделей выступает сервером оригинальных данных - отвечает на запросы
прилолжение импортёр выступает клиентом - посылает запросы
передачу запросов и ответов выполняет интегратор

импортёр == пользователь
экспортёр == провайдер

Записи в таблицах, а значит и сущности, можно создавать и удалять.
Т.е. если создать объект экпортнутой модели, потом в приложении-пользователе
привязать к нему инфу, а затем удалить сам объект инфа в зависимом приложении должна сохраниться.
Т.е. на запрос о несуществующем объекте провайдер ответит что такого нет и всё (или ответит что такой удалён/деактивирован и т.д.)
Короче провайдер сам решит как обработать такую ситуацию.

Интерфейс провайдера:
1) выдать список экспортируемых моделей
2) выдать список всех id конкретной модели
3) выдать описание объекта с конкретным id
4) выдать описание объектов с id из списка (в виде словаря)

Когда создаётся новый объект экспортируемой модели
провайдер должен сообщать всем пользователям что появился новый объект
чтобы они могли начинать привязывать к нему инфу.

Интерфейс пользователя:
1) выдать список импортируемых ролей
2) зарегистрировать новый объект (приложение, модель, id) в заданной роли

Интегратор должен принимать запросы у пользователей и отправлять им ответы от провайдеров.
Чтобы узнать в какое приложение послать запрос интегратор хранит список зарегистрированных приложений
и полученные от них списки экспортируемых моделей.

Обратную операцию - создание записи об объекте в таблице у пользователя интегратор может
выполнить если знает в каких ролях выступают конкретные модели.
Т.е. интегратор хранит таблицу соответсвия модель -> несколько ролей для роутинга нотификаций о создании объектов.
Это своего рода конфиг и экспортёры и импортёры ничего о нём не знают.
Т.е. импортёры не могут указывать какие модели они могут использовать, а экспортёры не могут указывать в каких ролях могут
выступать их модели.

Интегратор хранит:
    1) список приложений
  для каждого приложения - данные полученные от него:
    1) список экспортируемых моделей
    2) список импортируемых ролей
  конфиг:
    1) мультмар соотвествия приложение.модель -> приложение.роль
	каждая модель может использоваться в нескольких ролях
	в каждой роли может выступать несколько моделей

Интегратор - пассивная составляющая проекта. Он предоставляет интерфейс, который дёргают сами приложения.

Интерфейс интегратора:
1) Зарегистрировать приложение.
	Здесь интегратор получает списки моделей и ролей от приложения.
2) Создать запись о новом объекте эскпортируемой модели.
3) Получить инфу об объекте.
4) Получить инфу об списке объектов.



В полной мере только родной для объектов модуль может отображать содержимое объекта потому что только он знает что это за объект
но другим модулям, ссылающимся на этот объект тоже надо его отображать:
из полученного объекта можно получить его представление для "чужих" модулей:
	- короткое текстовое представление
	- расширенное текстовое представление
	- ссылка на детальное описание объекта






пока обойдёмся этим, но если этого не хватит - придётся кроме типа и идентификатора добавлять тип представления и тогда модуль уже будет возвращать сложный объект для преобразования в html или сразу html






модули:
1) personal_info
2) contacts
3) finance
4) credentials (на случай удалённого входа)
5) social_info (интересы и т.д.)
6) projects
7) access_rights
